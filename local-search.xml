<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在手机上发表博客</title>
    <link href="/2022/10/18/editonphone/"/>
    <url>/2022/10/18/editonphone/</url>
    
    <content type="html"><![CDATA[<p><strong>本文全部编辑及上传工作均在手机上完成</strong><br><img src="https://img.suxss.tk/mobile/edit-o-p-content1.png" alt=""></p><ul><li>图片上传-Mixplorer</li><li>Markdown编辑-坚果云markdown</li><li>查找图片-PixEz</li><li>压缩图片-微信</li></ul><p>吐槽一下，安卓上有些软件连编辑保存个markdown文件都要vip，吃相也太难看了吧</p><p>写好markdown上传至博客备份仓库，由Travis CI进行持续集成，自动部署至博客网站所在仓库</p><p>手机上写博客涉及的一些工作还是很繁琐的，比如上传图片，编辑文章等等</p><p>另一种方法是在语雀等平台写博客，通过插件，将语雀上的文章同步至自己的博客网站</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Python实现每日健康打卡</title>
    <link href="/2021/09/28/sudadaka/"/>
    <url>/2021/09/28/sudadaka/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>学校要求每天都要健康打卡，每天都得填些一些固定的信息，感觉很繁琐，干脆写个爬虫。</p><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>先来抓包。由于是在手机app上打卡的，打卡所进行的网络请求不是直接暴露出来的，所以就先进行抓包。</p><h2 id="1-HttpCanary"><a href="#1-HttpCanary" class="headerlink" title="1.HttpCanary"></a>1.HttpCanary</h2><p>优先选黄鸟进行抓包，因为这个软件抓包的步骤没那么繁琐</p><p>首先，打开软件，在<code>设置-&gt; 目标应用</code>中添加要抓包的app</p><p>然后点击抓包按钮，开始抓包</p><p>打开要抓包的app</p><p>然而，出现了类似于网络断开的现象，抓包失败</p><p><img src="https://img.suxss.tk/common/daka-canary1.webp" alt="黄鸟抓包失败"></p><p>于是，更换抓包软件</p><h2 id="2-Fiddler"><a href="#2-Fiddler" class="headerlink" title="2.Fiddler"></a>2.Fiddler</h2><p>打开电脑上的Fiddler，设置好手机网络，手动增加代理，主机名为<code>电脑ip</code> ， 端口号默认为<code>8888</code></p><p>再次打开软件，成功抓包</p><p><img src="https://img.suxss.tk/common/daka-fiddler1.webp" alt="fiddler成功抓包"></p><p>成功获取到打卡的网址：<code>http://dk.suda.edu.cn/default/work/suda/jkxxtb/</code></p><p>有了这个，接下来的抓包工作就可以交给浏览器的开发者工具了</p><h2 id="3-开发者工具"><a href="#3-开发者工具" class="headerlink" title="3.开发者工具"></a>3.开发者工具</h2><p>首先，用<code>selenium</code>库打开一个没有保存cookie的浏览器</p><p>发现要登录，利用抓包分析一下登录逻辑</p><p>结果发现登录还是比较简单的，主要就是网页里有几个隐藏元素，只需要解析网页源代码，提取出这几个值就好，其中只有id为<code>lt</code>和<code>pid</code>的元素的值是会变的，所以，只需要提取这两个值就好了</p><p><img src="https://img.suxss.tk/common/daka-login1.webp" alt="所需隐藏元素"></p><p>拿到这些值，再加上密码和账号，做成一个字典，<code>post</code>到当前页面就能拿到cookie了</p><p>接下来就是挖掘如何提交健康信息的表单</p><p>为了方便测试，又不产生不必要的影响，先断网，以免发送了错误的数据</p><p>在网页代码中找到提交表单的业务代码段如下，打上断点</p><p><img src="https://img.suxss.tk/common/daka-post1.webp" alt="开始调试"></p><p>先填好信息，然后点击提交开始调试</p><p>程序运行到断点停下来后，将要发送的信息提取出来</p><p>这里可以看到，要发送的信息在<code>data</code>中， 按照它的表达式在控制台中打印出信息</p><p><img src="https://img.suxss.tk/common/daka-post2.webp" alt="截取data信息"></p><p>打印出来的信息就是到时候<code>post</code>的数据，而<code>post</code>的地址就是刚才断点附近的那个网址</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>根据之前的结果就能写出所有的代码了<br>主要就是先访问目标网址，它会自动重定向到登录界面，<br>然后解析登录界面源代码，发送登录请求<br>接着带着cookie访问目标网址<br>最终发送post请求</p><details><summary>完整代码</summary><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> reusername <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment"># 学号</span>password <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment"># 密码</span>url1 <span class="token operator">=</span> <span class="token string">'http://dk.suda.edu.cn/default/work/suda/jkxxtb/jkxxcj.jsp'</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>r1 <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url1<span class="token punctuation">)</span>list_1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;input type="hidden" name="pid" value="(.*?)" />'</span><span class="token punctuation">,</span> r1<span class="token punctuation">.</span>text<span class="token punctuation">)</span>list_2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;input type="hidden" name="lt" value="(.*?)">'</span><span class="token punctuation">,</span> r1<span class="token punctuation">.</span>text<span class="token punctuation">)</span>login_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>    <span class="token string">'pid'</span><span class="token punctuation">:</span> list_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'lt'</span><span class="token punctuation">:</span> list_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'source'</span><span class="token punctuation">:</span> <span class="token string">'cas'</span><span class="token punctuation">,</span>    <span class="token string">'execution'</span><span class="token punctuation">:</span> <span class="token string">'e1s1'</span><span class="token punctuation">,</span>    <span class="token string">'_eventId'</span><span class="token punctuation">:</span> <span class="token string">'submit'</span><span class="token punctuation">&#125;</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36 Edg/93.0.961.52'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>r2 <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>r1<span class="token punctuation">.</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>login_data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M'</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>headers<span class="token punctuation">[</span><span class="token string">'Referer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> r2<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://dk.suda.edu.cn/default/common/lib/mootools.js'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 访问这个文件会多加一个cookie，至于有没有用我没有试</span>url <span class="token operator">=</span> <span class="token string">'http://dk.suda.edu.cn/default/work/suda/jkxxtb/com.sudytech.portalone.base.db.saveOrUpdate.biz.ext'</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'entity'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'sqrid'</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 刚才在控制台获取的信息</span>data<span class="token punctuation">[</span><span class="token string">'entity'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tbrq'</span><span class="token punctuation">]</span> <span class="token operator">=</span> t1data<span class="token punctuation">[</span><span class="token string">'entity'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tjsj'</span><span class="token punctuation">]</span> <span class="token operator">=</span> t2<span class="token comment"># print(data)</span>r <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></details><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>每天运行这个程序就好了</p><p>如果想要更方便的话，可以将代码部署到云端，比如腾讯云函数或者服务器上，设置好每天运行一次就行了</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选课系统验证码识别</title>
    <link href="/2021/09/27/captcha/"/>
    <url>/2021/09/27/captcha/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最近网站差不多搞好了，特地来水一篇文章</p><p>之前就做了选课网的一个爬虫，是通过教师端登录进去的。因为当时教师端的验证码噪声较少，容易识别，而且网上还有别人做好的识别模块，可以直接调用，还有一点就是教师端没有学生端拥堵。</p><p>到了上学期末的时候，学校的选课网就进行了改版，一开始是教师端的网页源代码里的验证码图片部分出了问题，导致无法加载图片，当时是一个图片标签里写了两个链接，而且验证码接口改版了，要加上一段随机标识id才能访问。那段时间估计正在改版。其实我很好奇怎么会这样，那html代码写的都有问题（而且还是那么明显的低级错误）为什么还放到服务器上让别人访问，还有就是验证码图片加载不出来，当时老师是怎么登录选课系统的，当然有可能他们那段时间暂停了登录。过了几天，再去看的时候已经改版完了，教师端和学生端用了同样类型的验证码。不仅噪声增加，图片大小也发生了变化，由72x27变为72x25，直接调用之前的模块会出问题，就算补两排空白像素识别率也不会高。在网上找了找，要么就是不符合这种情况，仅有的那一两个识别率也较低，所以就决定自己搞个出来。</p><h1 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h1><h2 id="1-找样本"><a href="#1-找样本" class="headerlink" title="1.找样本"></a>1.找样本</h2><p>去百度了一下正方教务系统，找到了几个和学校选课网采用一样的验证码的网站</p><p><a href="http://xk.zucc.edu.cn/">zucc.edu.cn</a></p><p><a href="http://jwgl.mju.edu.cn/">mju.edu.cn</a></p><p><a href="http://jiaowu.hszy.edu.cn/">hszy.edu.cn</a></p><p>接着，写个爬虫，下载验证码图片。考虑到这种网站这种时间一般不会有同一个人较长时间反复访问登录界面，又搞了几个代理ip，并且每次间隔时间较长（与一般爬虫相比）。</p><h2 id="2-打码-图片预处理"><a href="#2-打码-图片预处理" class="headerlink" title="2.打码+图片预处理"></a>2.打码+图片预处理</h2><p>作为一个资深白嫖怪，怎么可能让打码平台从我身上赚到一分钱？所以我选择亲自打码。考虑到图片有几千张，一个一个去改文件名是不可能的，所以我选择自己做了个打码小程序，带GUI界面的那种</p><p><img src="https://img.suxss.tk/code-ui.png" alt=""></p><p>(一开始是一个输入框，这是后来改的，因为后来已经有一个像样的模型了，但是事实证明还是一个好)</p><p>同时考虑到每个字母所在位置的范围差不多是固定的，所以标记完一张图片的同时把这张图片切割为4块。</p><p>然后就得到了像这样的上千张图片</p><p><img src="https://img.suxss.tk/code-results.png" alt=""></p><h2 id="3-开始训练模型"><a href="#3-开始训练模型" class="headerlink" title="3.开始训练模型"></a>3.开始训练模型</h2><p>接着就是把数据集丢给AI去学</p><p>识别验证码实际上是一个分类问题，这里就是把要识别的图像读取为矩阵，然后把矩阵映射到34个类中（这里只有数字和小写字母，字母没有o和z）</p><p>这里我直接调用了别人写好的训练模块</p><p><a href="https://github.com/nickliqian/cnn_captcha">nickliqian/cnn_captcha (github.com)</a></p><p>训练速度出乎意料的快，几分钟准确度就到了90%以上。识别速度也特别快。</p><h2 id="4-利用训练好的模型辅助打码并继续训练"><a href="#4-利用训练好的模型辅助打码并继续训练" class="headerlink" title="4.利用训练好的模型辅助打码并继续训练"></a>4.利用训练好的模型辅助打码并继续训练</h2><p>再次回到第2步，只不过这次不再是单纯的人工打码，而是先是由模型识别，出来结果如果错误的话再由人工改正。这样一下子打码速度就快了许多。再把这些新的数据给机器去学习。多次重复这步。</p><h1 id="将结果打包"><a href="#将结果打包" class="headerlink" title="将结果打包"></a>将结果打包</h1><p>为了方便以后调用，我把代码打包成了pyd文件</p><p>以后想要调用识别模块，只需要导入这个pyd文件，再用一行代码<code>a = captcha.recognize(&#39;图片路径&#39;)</code>就能得到识别结果了</p><p>最终文件：<a href="https://github.com/suxss/ZF_captcha">suxss/ZF_captcha (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>ai</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迷宫</title>
    <link href="/2021/08/17/%E8%BF%B7%E5%AE%AB/"/>
    <url>/2021/08/17/%E8%BF%B7%E5%AE%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近看了道题，题目感觉还蛮好玩的，就做了做</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">下图给出了一个迷宫的平面图，其中标记为 1 的为障碍，标记为 0 的为可 以通行的地方。010000000100001001110000迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。对于上面的迷宫，从入口开始，可以按DRRURRDDDR 的顺序通过迷宫， 一共 10 步。其中 D、U、L、R分别表示向下、向上、向左、向右走。 对于下面这个更复杂的迷宫（30 行 50 列），请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。 请注意在字典序中D&lt;L&lt;R&lt;U。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>题目中的复杂迷宫如下</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-nonespan aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>其实题目很简单，就是幼儿园小学的小朋友玩的迷宫</p><p>因此只需要把图画出来（比如用Excel, Python）</p><p>然后找最短通路就行了</p><p>但是，这种方法很不高级</p><p>用编程的方法解决它更有意思</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>题目比较简单，就不多解释代码了</p><p>主要用到了广度优先，本质上是穷举</p><p>每条路每次都走一步，谁先到终点谁就是最短路径</p><p>为了避免重复，引入集合<code>history</code>记录历史走过的地点，其中的关键是这个历史是每条路共享的，如果其中有一条路A走到了路B或者自己之前走过的位置上，那路A肯定不是最短路径</p><p>代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 30 x 50 的矩阵</span><span class="token comment"># DLRU</span>way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>ways <span class="token operator">=</span> <span class="token punctuation">[</span>way<span class="token punctuation">,</span> <span class="token punctuation">]</span>history <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ways<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_ways <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> ways<span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token number">50</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">50</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">50</span> <span class="token keyword">not</span> <span class="token keyword">in</span> history <span class="token keyword">and</span> x <span class="token operator">&lt;</span> <span class="token number">29</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>            new_way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'D'</span><span class="token punctuation">&#125;</span>            new_ways<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_way<span class="token punctuation">)</span>            history<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_way<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> history <span class="token keyword">and</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            new_way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'L'</span><span class="token punctuation">&#125;</span>            new_ways<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_way<span class="token punctuation">)</span>            history<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_way<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> history <span class="token keyword">and</span> y <span class="token operator">&lt;</span> <span class="token number">49</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            new_way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'R'</span><span class="token punctuation">&#125;</span>            new_ways<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_way<span class="token punctuation">)</span>            history<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_way<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">50</span> <span class="token keyword">not</span> <span class="token keyword">in</span> history <span class="token keyword">and</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>            new_way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'U'</span><span class="token punctuation">&#125;</span>            new_ways<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_way<span class="token punctuation">)</span>            history<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_way<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ways <span class="token operator">=</span> new_ways<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>结果如下</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">DDDDRRURRRRRRDRRRRDDDLDDRDDDDDDDDDDDDRDDRRRURRUURRDDDDRDRRRRRRDRRURRDDDRRRRUURUUUUUUULULLUUUURRRRUULLLUUUULLUUULUURRURRURURRRDDRRRRRDDRRDDLLLDDRRDDRDDLDDDLLDDLLLDLDDDLDDRRRRRRRRRDDDDDDRR186<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><p>进一步将寻路过程可视化，结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/suxss/image/2021/test-min.gif" alt=""></p><p>可视化代码</p><ul><li>1</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 画地图</span><span class="token keyword">import</span> PIL<span class="token keyword">import</span> numpy<span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">bigger</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> matrix<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    y <span class="token operator">=</span> matrix<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    bigmap <span class="token operator">=</span> numpy<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">*</span>n<span class="token punctuation">,</span> y<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>numpy<span class="token punctuation">.</span>bool_<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">:</span>                bigmap<span class="token punctuation">[</span>n <span class="token operator">*</span> i<span class="token punctuation">:</span>n <span class="token operator">*</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> n <span class="token operator">*</span> j<span class="token punctuation">:</span>n <span class="token operator">*</span> j <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>numpy<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> bigmap<span class="token builtin">map</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>numpy<span class="token punctuation">.</span>bool_<span class="token punctuation">)</span><span class="token builtin">map</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">map</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token number">1</span>bigmap <span class="token operator">=</span> bigger<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>new_map <span class="token operator">=</span> PIL<span class="token punctuation">.</span>Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>bigmap<span class="token punctuation">)</span>new_map<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>new_map<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'map.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>2</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 画每一帧的图像</span><span class="token keyword">import</span> turtle<span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">bgpic</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> picname<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> picname <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_bgpicname    <span class="token keyword">if</span> picname <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_bgpics<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_bgpics<span class="token punctuation">[</span>picname<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_image<span class="token punctuation">(</span>picname<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_setbgpic<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_bgpic<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_bgpics<span class="token punctuation">[</span>picname<span class="token punctuation">]</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_bgpicname <span class="token operator">=</span> picname<span class="token keyword">def</span> <span class="token function">D</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">-</span><span class="token number">782</span><span class="token operator">+</span><span class="token number">160</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">467</span><span class="token operator">-</span><span class="token number">160</span><span class="token operator">+</span><span class="token number">67</span><span class="token keyword">def</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> current    x<span class="token punctuation">,</span> y <span class="token operator">=</span> current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>D<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    current <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> current    x<span class="token punctuation">,</span> y <span class="token operator">=</span> current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>D<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    current <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> current    x<span class="token punctuation">,</span> y <span class="token operator">=</span> current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>D<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    current <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">25</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> current    x<span class="token punctuation">,</span> y <span class="token operator">=</span> current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>D<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">25</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    current <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">parse_way</span><span class="token punctuation">(</span>way<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>way<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> way<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            down<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> way<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'U'</span><span class="token punctuation">:</span>            up<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> way<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            left<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> way<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'R'</span><span class="token punctuation">:</span>            right<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>D<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> current    current <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    myWin <span class="token operator">=</span> turtle<span class="token punctuation">.</span>Screen<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1250</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">750</span><span class="token punctuation">,</span> startx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> starty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>bgpic<span class="token punctuation">(</span><span class="token string">r'map.png'</span><span class="token punctuation">)</span>  <span class="token comment"># 这样设置。</span>    turtle<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>setposition<span class="token punctuation">(</span>D<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>colormode<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> current    current <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 保存</span>    ts <span class="token operator">=</span> turtle<span class="token punctuation">.</span>getscreen<span class="token punctuation">(</span><span class="token punctuation">)</span>    ts<span class="token punctuation">.</span>getcanvas<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>postscript<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">"work.eps"</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"work.eps"</span><span class="token punctuation">)</span>    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./images/work_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num<span class="token punctuation">&#125;</span></span><span class="token string">.jpg"</span></span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    first<span class="token punctuation">(</span><span class="token punctuation">)</span>    way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>    ways <span class="token operator">=</span> <span class="token punctuation">[</span>way<span class="token punctuation">,</span> <span class="token punctuation">]</span>    history <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span>    s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ways<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_ways <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> ways<span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token number">50</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">50</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">50</span> <span class="token keyword">not</span> <span class="token keyword">in</span> history <span class="token keyword">and</span> x <span class="token operator">&lt;</span> <span class="token number">29</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                new_way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'D'</span><span class="token punctuation">&#125;</span>                new_ways<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_way<span class="token punctuation">)</span>                history<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_way<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> history <span class="token keyword">and</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                new_way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'L'</span><span class="token punctuation">&#125;</span>                new_ways<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_way<span class="token punctuation">)</span>                history<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_way<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> history <span class="token keyword">and</span> y <span class="token operator">&lt;</span> <span class="token number">49</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                new_way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'R'</span><span class="token punctuation">&#125;</span>                new_ways<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_way<span class="token punctuation">)</span>                history<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_way<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">50</span> <span class="token keyword">not</span> <span class="token keyword">in</span> history <span class="token keyword">and</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">map</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>                new_way <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'place'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'U'</span><span class="token punctuation">&#125;</span>                new_ways<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_way<span class="token punctuation">)</span>                history<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_way<span class="token punctuation">[</span><span class="token string">'place'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> new_ways<span class="token punctuation">:</span>            parse_way<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        s <span class="token operator">+=</span> <span class="token number">1</span>        save<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        ways <span class="token operator">=</span> new_ways<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>3</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将图像转化为gif动画与mp4视频</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> os<span class="token keyword">import</span> imageio<span class="token keyword">def</span> <span class="token function">pic_to_video</span><span class="token punctuation">(</span>pic_list<span class="token punctuation">,</span> video_name<span class="token punctuation">,</span> fps<span class="token punctuation">,</span> pic_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"mp4"</span> <span class="token keyword">in</span> video_name<span class="token punctuation">:</span>        video <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter<span class="token punctuation">(</span>video_name<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>VideoWriter_fourcc<span class="token punctuation">(</span><span class="token operator">*</span><span class="token string">'mp4v'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fps<span class="token punctuation">,</span> pic_size<span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token string">".avi"</span> <span class="token keyword">in</span> video_name<span class="token punctuation">:</span>        video <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter<span class="token punctuation">(</span>video_name<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>VideoWriter_fourcc<span class="token punctuation">(</span><span class="token operator">*</span><span class="token string">'DIVX'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fps<span class="token punctuation">,</span> pic_size<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式错误"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> pic_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            video<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>    video<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">compose_gif</span><span class="token punctuation">(</span>img_paths<span class="token punctuation">)</span><span class="token punctuation">:</span>    gif_images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> img_paths<span class="token punctuation">:</span>        gif_images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imageio<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>    imageio<span class="token punctuation">.</span>mimsave<span class="token punctuation">(</span><span class="token string">"test.gif"</span><span class="token punctuation">,</span> gif_images<span class="token punctuation">,</span> fps<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    image_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'./images/work_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.jpg'</span></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    compose_gif<span class="token punctuation">(</span>image_list<span class="token punctuation">)</span>    pic_to_video<span class="token punctuation">(</span>image_list<span class="token punctuation">,</span> <span class="token string">"test.mp4"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">935</span><span class="token punctuation">,</span> <span class="token number">562</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容斥原理的简单运用</title>
    <link href="/2021/08/11/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/"/>
    <url>/2021/08/11/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>昨天看了一道题，题目大概是甲乙丙分别多少秒放一次鞭炮， 然后问一个时间段里能听到多少响。<br>其实就是给出三个正整数$n_1, n_2, n_3$，再给一个$n$，问$1\sim n$​秒内有多少个不重复的数被它们其中一个整除。</p><p>用集合的语言描述如下</p><script type="math/tex; mode=display">n_1,n_2,n_3,n已知,A=\{k|k \in \mathbb{N} ^*,k\leq n, k|n_1或k|n_2或k|n_3\},求|A|.</script><p>为了计算集合$A$​所含元素个数，可以先计算下面三个集合所含元素个数，再减去重复计数的个数</p><script type="math/tex; mode=display">\begin{aligned}A_1=&\{k|k \in \mathbb{N} ^*,k\leq n, k|n_1\}\\A_2=&\{k|k \in \mathbb{N} ^*,k\leq n, k|n_2\}\\A_3=&\{k|k \in \mathbb{N} ^*,k\leq n, k|n_3\}\end{aligned}</script><p><img src="https://cdn.jsdelivr.net/gh/suxss/image/2021/绘图1.jpg" alt="图1"></p><p>其中$A_1\cap A_2,A_1\cap A_3,A_2\cap A_3$​里的元素被多算了，因此要减去</p><p>如果直接减去$|A_1\cap A_2|+|A_1\cap A_3|+|A_2\cap A_3|$​的话，$A_1\cap A_2\cap A_3$里的元素又多减了，因此得加上，</p><p>于是，得到公式</p><script type="math/tex; mode=display">|A_1 \cup A_2\cup A_3|=|A_1|+|A_2|+|A_3|-|A_1\cap A_2|-|A_1\cap A_3|-|A_2\cap A_3|+|A_1\cap A_2\cap A_3|</script><p>整理一下就是</p><script type="math/tex; mode=display">\left\lvert \bigcup_{i=1}^3 A_i\right\rvert=\sum_{i=1}^3(-1)^{i-1}\left(\sum_{1\leq j_1<\cdots <j_i\leq3}\left\lvert\bigcap_{k=1}^iA_{j_k}\right\rvert\right)</script><p>接下来就是去求每一项，其中关键的是求最小公倍数</p><p>三个数的最小公倍数可以用两组两个数的最小公倍数表示</p><script type="math/tex; mode=display">[n_1,n_2,n_3]=[[n_1,n_2],[n_2,n_3]]</script><p>证明很简单，如下</p><script type="math/tex; mode=display">\begin{aligned}\forall\space&k,\space k|n_1,k|n_2,k|n_3 ;\\\because\space &\left\{ {\begin{array}{*{20}{c}}{k|{n_1}}\\{k|{n_2}}\end{array} \Leftrightarrow  k|[{n_1},{n_2}]} \right.\\\therefore \space&k|[{n_1},{n_2}],k|[{n_1},{n_3}],k|[{n_2},{n_3}]\\\therefore \space&k|[[n_1,n_2],[n_2,n_3]]\end{aligned}</script><p>由此我们得到 这三个数的任意的公倍数都被$[[n_1,n_2],[n_2,n_3]]$整除</p><p>而$[[n_1,n_2],[n_2,n_3]]$显然是$n_1, n_2, n_3$​的公倍数，证毕</p><p>而最小公倍数与最大公因数有如下关系</p><script type="math/tex; mode=display">[a,b]\cdot(a,b)=ab</script><p>因此要求最小公倍数只需求最大公因数，这就可以用辗转相除法</p><p>Python代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">successive_division</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>  <span class="token comment"># 辗转相除法</span>    <span class="token keyword">while</span> a <span class="token operator">%</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b    <span class="token keyword">return</span> b<span class="token keyword">def</span> <span class="token function">least_common_multiple</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>  <span class="token comment"># 最小公倍数</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b <span class="token operator">/</span> successive_division<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>C语言代码如下</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">successive_division</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t <span class="token operator">=</span> i<span class="token punctuation">;</span>        i <span class="token operator">=</span> j<span class="token punctuation">;</span>        j <span class="token operator">=</span> t <span class="token operator">%</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">least_common_multiple</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">successive_division</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>依靠这个就能写出求解原问题的函数</p><p>Python代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>n1<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n2<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n3<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> n <span class="token operator">//</span> n1 <span class="token operator">+</span> n <span class="token operator">//</span> n2 <span class="token operator">+</span> n <span class="token operator">//</span> n3    result <span class="token operator">-=</span> n <span class="token operator">//</span> least_common_multiple<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">//</span> least_common_multiple<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n3<span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">//</span> least_common_multiple<span class="token punctuation">(</span>n2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span>    result <span class="token operator">+=</span> n <span class="token operator">//</span> least_common_multiple<span class="token punctuation">(</span>least_common_multiple<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">,</span> least_common_multiple<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>C语言代码如下</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">,</span> <span class="token keyword">int</span> n3<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">+=</span> n <span class="token operator">/</span> n1 <span class="token operator">+</span> n <span class="token operator">/</span> n2 <span class="token operator">+</span> n <span class="token operator">/</span> n3<span class="token punctuation">;</span>    result <span class="token operator">-=</span> n <span class="token operator">/</span> <span class="token function">least_common_multiple</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token function">least_common_multiple</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n3<span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token function">least_common_multiple</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">+=</span> n <span class="token operator">/</span> <span class="token function">least_common_multiple</span><span class="token punctuation">(</span><span class="token function">least_common_multiple</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">least_common_multiple</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序（二）</title>
    <link href="/2021/08/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2/"/>
    <url>/2021/08/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2/</url>
    
    <content type="html"><![CDATA[<p>昨天看着原理大致地写了写快速排序的Python实现。主要是把原列表分成了三块：小于参考数的、等于参考数的、大于参考数的。</p><p>遍历列表，看看每个数属于哪一类，接着将它们分别放入三个列表中，对其中不等于参考数的两个列表运用函数递归排序后在拼接起来。</p><p>用Python可以很方便的实现，因为Python的变量所占用的内存空间不是恒定不变的，在列表上的体现就是创建一个新列表时不需要声明其长度。而大部分语言在声明变量时就要为其分配一个固定大小的内存空间，体现在列表（或者数组）上就是其长度在一开始就是固定的。当然可以在一开始就设置成长度足够大的列表（或数组），然而这样必然会很大比例的内存空间浪费。因此，如果要直接将昨天的代码改写成其他语言，基本上是运行效率不高的。于是，今天来试着改一改昨天的代码。</p><h2 id="Python代码的改写"><a href="#Python代码的改写" class="headerlink" title="Python代码的改写"></a>Python代码的改写</h2><p>昨天的快速排序代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort_1</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        list_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">&lt;</span> num_list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">></span> num_list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                list_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                list_3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        sorted_list <span class="token operator">=</span> quick_sort_1<span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list_3<span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>quick_sort_1<span class="token punctuation">(</span>list_2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sorted_list    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> num_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>关键在于如何修改，划分原列表，使其分为多个部分。</p><p>这里给出三种基于在原列表上交换两数的方法</p><ul><li>第一种</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort_2</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    j <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> j <span class="token operator">></span> i<span class="token punctuation">:</span>        x <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">while</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> x <span class="token keyword">and</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x <span class="token keyword">and</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                j <span class="token operator">-=</span> <span class="token number">1</span>        sorted_list <span class="token operator">=</span> quick_sort_2<span class="token punctuation">(</span>num_list<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>quick_sort_2<span class="token punctuation">(</span>num_list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sorted_list    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> num_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>第二种</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort_3</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> left    j <span class="token operator">=</span> right    <span class="token keyword">if</span> j <span class="token operator">></span> i<span class="token punctuation">:</span>        x <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">while</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> x <span class="token keyword">and</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x <span class="token keyword">and</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                j <span class="token operator">-=</span> <span class="token number">1</span>        sorted_list <span class="token operator">=</span> quick_sort_3<span class="token punctuation">(</span>num_list<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>quick_sort_3<span class="token punctuation">(</span>num_list<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sorted_list    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> num_list<span class="token punctuation">[</span>left<span class="token punctuation">:</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>第三种</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort_4</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    j <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> j <span class="token operator">></span> i<span class="token punctuation">:</span>        x <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            <span class="token keyword">while</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> x <span class="token keyword">and</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x <span class="token keyword">and</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                j <span class="token operator">-=</span> <span class="token number">1</span>        sorted_list <span class="token operator">=</span> quick_sort_4<span class="token punctuation">(</span>num_list<span class="token punctuation">[</span><span class="token punctuation">:</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>num_list<span class="token punctuation">[</span>j<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>quick_sort_4<span class="token punctuation">(</span>num_list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sorted_list    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> num_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行速度和昨天的都差不多</p><h2 id="改写为C语言"><a href="#改写为C语言" class="headerlink" title="改写为C语言"></a>改写为C语言</h2><p>将上面第二种方法改写为C语言，代码如下<br><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">,</span> j<span class="token operator">=</span>right<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                t <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                t <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><p>由于C语言速度太快了，所以这次测试10万个数的排序</p><p>完整测试代码如下</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100000</span></span></span><span class="token keyword">void</span> <span class="token function">pprint</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                t <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> duration<span class="token punctuation">;</span>    <span class="token class-name">time_t</span> start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span><span class="token comment">//    pprint(a, N);</span>    start_time <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    end_time <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    duration <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span> <span class="token operator">/</span> CLK_TCK<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lfs\n"</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    pprint(a, N);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">0.011000s进程已结束，退出代码为 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>昨天Python的快速排序<strong>1万</strong>个数需要大概<strong>0.015</strong>秒与C语言快速排序<strong>10万</strong>个所花时间差不多</p><h2 id="Python代码的优化"><a href="#Python代码的优化" class="headerlink" title="Python代码的优化"></a>Python代码的优化</h2><p>Python版本的快速排序排序10万个数的运行时间如下</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">quick_sort:0.16658687591552734s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>Python的功能是十分强大的，但是居然落后这么多，让我十分不甘心。</p><p>下面我们来优化Python版本的代码</p><h3 id="1-把所有变量都转为局部变量"><a href="#1-把所有变量都转为局部变量" class="headerlink" title="1.把所有变量都转为局部变量"></a>1.把所有变量都转为局部变量</h3><p>直接把之前<code>if __name__ == &#39;__main__&#39;:</code>里的语句写入<code>main</code>函数</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> random <span class="token keyword">import</span> randint    <span class="token keyword">from</span> time <span class="token keyword">import</span> time    n <span class="token operator">=</span> <span class="token number">100000</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"quick_sort:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>优化结果</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">quick_sort:0.15358948707580566s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>效果不是很明显</p><h3 id="2-使用pypy3"><a href="#2-使用pypy3" class="headerlink" title="2.使用pypy3"></a>2.使用pypy3</h3><p>运行结果</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">quick_sort:0.023967981338500977s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>大约快了8倍，多次运行发现快的可以到<code>0.02s</code></p><h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h3><p>加速python代码的方法还有很多种</p><p>比如可以将代码文件转为pyo，pyd文件</p><p>像这里还可以使用numpy库</p><p>但是我这里的代码用了较多的extend和append方法，如果用array无法实现数组原地修改，因此如果直接用的话速度反而会降下来</p><p>其实Python里列表排序可以直接使用sort方法</p><p>代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">from</span> time <span class="token keyword">import</span> timen <span class="token operator">=</span> <span class="token number">100000</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"quick_sort:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用pypy3运行，运行时间为<code>0.010~0.011s</code>左右，与C语言持平</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序（一）</title>
    <link href="/2021/08/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/08/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>最近借了些书，有本叫做<u>算法与程序设计(Python)</u>，然而里面300页只有80页在讲算法，大部分在讲Python基础，有种被骗了的感觉😞</p><p>算法部分也很多都是很基础的内容。</p><p>里面有一个讲的是快速排序，快排的大名可以说是早有耳闻了😄，但是一直没学，上学期自己去看了下大致的原理，但是没空把实现的代码写出来，也懒得去找代码。看到这本书里有快排，我满怀希望地翻到这一部分，才发现并没有给出实现的代码，也是讲了一下原理，给了大致的伪代码。现在正好无聊，就试着根据原理写写这个实现代码。</p><hr><p>因为对Python比较熟，而且Python语法更简单，就先写快排的Python实现</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 如果长度等于1就不用排序，直接返回</span>        x <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>  <span class="token comment"># 随便找一个参考数</span>        list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># list_1里放比参考数小的</span>        list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># list_2里放比参考数大的</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">&lt;</span> num_list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                list_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment"># 函数递归，分别对list_1,list_2进行快速排序，再合并起来</span>        sorted_list <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num_list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>quick_sort<span class="token punctuation">(</span>list_2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sorted_list    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> num_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>一开始很顺利的写了出来，然而运行出了问题</p><p>测试代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行后，程序报错如下</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Traceback (most recent call last):  File &quot;****\main.py&quot;, line 20, in &lt;module&gt;    b &#x3D; quick_sort(a)  File &quot;****\main.py&quot;, line 11, in quick_sort    sorted_list &#x3D; quick_sort(list_1)  File &quot;****\main.py&quot;, line 11, in quick_sort    sorted_list &#x3D; quick_sort(list_1)  File &quot;****\main.py&quot;, line 12, in quick_sort    sorted_list.extend(quick_sort(list_2))  File &quot;****\main.py&quot;, line 12, in quick_sort    sorted_list.extend(quick_sort(list_2))  File &quot;****\main.py&quot;, line 12, in quick_sort    sorted_list.extend(quick_sort(list_2))  [Previous line repeated 992 more times]  File &quot;****\main.py&quot;, line 11, in quick_sort    sorted_list &#x3D; quick_sort(list_1)  File &quot;****\main.py&quot;, line 2, in quick_sort    if len(num_list) &gt; 1:RecursionError: maximum recursion depth exceeded while calling a Python object进程已结束，退出代码为 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>其中问题的翻译如下</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">RecursionError：调用 Python 对象时超出了最大递归深度<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>上网查了一下</p><p>Python递归深度最多1000</p><p>但是我这里测试用的列表<code>a</code>的长度为7，按理说正常运行不会超过1000的递归深度，于是我加了打印代码，看看排序的过程如何</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"list_1:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>list_1<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"x:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"list_2:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>list_2<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>输出显示当有两个数相同时(如下)会一直重复的递归</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">list_1<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>x<span class="token punctuation">:</span><span class="token number">1</span>list_2<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>于是想到排序的过程中加入第三个列表，放置与参考数相同的数</p><p>改进的代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        list_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">&lt;</span> num_list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">></span> num_list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                list_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                list_3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        sorted_list <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list_3<span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>quick_sort<span class="token punctuation">(</span>list_2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sorted_list    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> num_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>成功运行，结果如下</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">[1, 1, 2, 2, 3, 6, 8]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><hr><p>这还不够，如果测试数据大一些呢？能否正常运行？</p><p>为此，引入<code>random</code>库，继续对函数进行测试，测试代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> random    n <span class="token operator">=</span> <span class="token number">10000</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>1万个数排序起来好像确实挺快的，瞬间出结果，总所周知Python的运行速度是比较慢的，所以还是挺意外的</p><hr><p>下面进一步测试快排的性能</p><p>将其与选择排序和冒泡排序进行比较</p><p>选择排序代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>num_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> i        num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> num_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>冒泡排序代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> num_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>测试代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> random    <span class="token keyword">import</span> time        n <span class="token operator">=</span> <span class="token number">10000</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"quick_sort:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t2<span class="token operator">-</span>t1<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> select_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"select_sort:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> bubble_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"bubble_sort:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">quick_sort<span class="token punctuation">:</span><span class="token number">0.</span>013994216918945312s  <span class="token comment"># 快速排序</span>select_sort<span class="token punctuation">:</span><span class="token number">0.</span>8812062740325928s  <span class="token comment"># 选择排序</span>bubble_sort<span class="token punctuation">:</span><span class="token number">2.</span>001237630844116s  <span class="token comment"># 冒泡排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>从结果来看快速排序通常情况下确实要比另外两种排序方法快的</p><hr><p>完整代码如下</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        list_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> item <span class="token operator">&lt;</span> num_list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">elif</span> item <span class="token operator">></span> num_list<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>                list_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                list_3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        sorted_list <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list_3<span class="token punctuation">)</span>        sorted_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>quick_sort<span class="token punctuation">(</span>list_2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sorted_list    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> num_list<span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>num_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>i        num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> num_list<span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>num_list<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> num_list<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> random    <span class="token keyword">import</span> time    n <span class="token operator">=</span> <span class="token number">10000</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"quick_sort:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t2<span class="token operator">-</span>t1<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> select_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"select_sort:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> bubble_sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"bubble_sort:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下学期课表</title>
    <link href="/2021/08/07/%E4%B8%8B%E5%AD%A6%E6%9C%9F%E8%AF%BE%E8%A1%A8/"/>
    <url>/2021/08/07/%E4%B8%8B%E5%AD%A6%E6%9C%9F%E8%AF%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<table>    <tr>        <td colspan="2" rowspan="1" style="width:2%;">时间</td><td align="center" style="width:14%;">星期一</td><td align="center" style="width:14%;">星期二</td><td align="center" style="width:14%;">星期三</td><td align="center" style="width:14%;">星期四</td><td align="center" style="width:14%;">星期五</td>        </tr><tr style="height:50px;">        <td rowspan="4" style="width:1%;">上午</td><td style="width:1%;">第一节</td><td align="center" rowspan="2" style="width:7%;">大学英语（三）</td><td align="center" rowspan="2" style="width:7%;">常微分方程</td><td align="center" rowspan="2" style="width:7%;">抽象代数1</td><td align="center" rowspan="2" style="width:7%;">计算机网络</td><td align="center" rowspan="2" style="width:7%;">概率论与数理统计（一）</td>    </tr><tr style="height:50px;">        <td>第二节</td>    </tr><tr style="height:50px;">        <td>第三节</td><td align="center" rowspan="2">数学分析（Ⅲ）</td><td align="center" rowspan="2">概率论与数理统计（一）</td><td align="center" rowspan="2">数学分析（Ⅲ）</td><td align="center" rowspan="2">计算机网络</td><td align="center" rowspan="2">常微分方程</td>    </tr><tr style="height:50px;">        <td>第四节</td>    </tr><tr style="height:50px;">        <td rowspan="4" style="width:1%;">下午</td><td>第五节</td><td align="center" rowspan="2">军事理论</td><td align="center" rowspan="2">普通物理实验</td><td align="center">&nbsp;</td><td align="center" rowspan="2">马克思主义基本原理概论</td><td align="center" rowspan="2">数学分析（Ⅲ）</td>    </tr><tr style="height:50px;">        <td>第六节</td><td align="center">&nbsp;</td>    </tr><tr style="height:50px;">        <td>第七节</td><td align="center" rowspan="2">篮球（男生）2</td><td align="center" rowspan="2">普通物理实验</td><td align="center">&nbsp;</td><td align="center">马克思主义基本原理概论</td><td align="center" rowspan="2">数学分析（Ⅲ）</td>    </tr><tr style="height:50px;">        <td>第八节</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td>    </tr><tr style="height:50px;">        <td rowspan="3" style="width:1%;">晚上</td><td>第九节</td><td align="center" rowspan="3">统计学基础</td><td align="center" rowspan="2">拓扑学1</td><td align="center" rowspan="3">组合数学</td><td align="center" rowspan="2">数学基础讲座III</td><td align="center">&nbsp;</td>    </tr><tr style="height:50px;">        <td>第10节</td><td align="center">&nbsp;</td>    </tr><tr style="height:50px;">        <td>第11节</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td>    </tr></table><p>周末课表还没出来，但是明确的是有</p><ul><li>离散数学</li><li>数据结构</li><li>数据库原理与设计</li></ul><p>而且</p><div class="note note-danger">            <p>周六 <strong><em>8</em></strong> 节课 周日 <strong><em>4</em></strong> 节课</p>          </div><p>高中至少还有晚自习的时间写写作业</p><p>这是真的连写作业的时间都不一定有</p><p>更何况不算计科院的离散数学</p><p>总共要上 <strong><em>8</em></strong> 门数学课</p><p>其中不乏 <u>抽象代数</u>、 <u>拓扑学</u> 、<u>组合数学</u>等有名的高难度课程</p><p>之前连数学分析都可以做到 <strong><em>一盏灯，一壶酒，一道数分做一宿</em></strong>， 这些课程更不用想象</p><p>那放假总轻松了吧？</p><p>呵呵 😊</p><p>中秋放 <strong><em>一</em></strong> 天</p><p>国庆放 <strong><em>三</em></strong> 天</p><p>别的就不用说了吧 😊</p><p><del>苦逼</del> 充实 的大学生活</p><hr><p>更新</p><p>周末课表出来了</p><p>完整课表如下</p><table>    <tr>        <td colspan="2" rowspan="1" style="width:2%;">时间</td><td align="center" style="width:14%;">星期一</td><td align="center" style="width:14%;">星期二</td><td align="center" style="width:14%;">星期三</td><td align="center" style="width:14%;">星期四</td><td align="center" style="width:14%;">        星期五</td>        <td align="center" style="width:14%;">星期六</td>        <td align="center" style="width:14%;">星期日</td>        </tr><tr style="height:50px;">        <td rowspan="4" style="width:1%;">上午</td><td style="width:1%;">第一节</td><td align="center" rowspan="2" style="width:7%;">大学英语（三）</td><td align="center" rowspan="2" style="width:7%;">常微分方程</td><td align="center" rowspan="2" style="width:7%;">抽象代数1</td>        <td align="center" rowspan="4" style="width:7%;">计算机网络</td><td align="center" rowspan="2" style="width:7%;">        概率论与数理统计（一）</td>        <td align="center" rowspan="4" style="width:7%;">数据结构</td>        <td align="center" rowspan="4" style="width:7%;">离散数学</td>    </tr><tr style="height:50px;">        <td>第二节</td>    </tr><tr style="height:50px;">        <td>第三节</td><td align="center" rowspan="2">数学分析（Ⅲ）</td><td align="center" rowspan="2">概率论与数理统计（一）</td><td align="center" rowspan="2">数学分析（Ⅲ）</td><td align="center" rowspan="2">        常微分方程</td>    </tr><tr style="height:50px;">        <td>第四节</td>    </tr><tr style="height:50px;">        <td rowspan="4" style="width:1%;">下午</td><td>第五节</td><td align="center" rowspan="2">军事理论</td>        <td align="center" rowspan="4">普通物理实验</td>        <td align="center" rowspan="4">　</td><td align="center" rowspan="3">马克思主义基本原理概论　</td>        <td align="center" rowspan="4">数学分析（Ⅲ）</td>        <td align="center" rowspan="4">数据库原理与设计</td>        <td align="center" rowspan="7">　</td>    </tr><tr style="height:50px;">        <td>第六节</td>    </tr><tr style="height:50px;">        <td>第七节</td><td align="center" rowspan="2">篮球（男生）2</td>    </tr><tr style="height:50px;">        <td>第八节</td><td align="center">　</td>    </tr><tr style="height:50px;">        <td rowspan="3" style="width:1%;">晚上</td><td>第九节</td><td align="center" rowspan="3"></td><td align="center" rowspan="2">拓扑学1</td><td align="center" rowspan="3">组合数学</td><td align="center" rowspan="2">数学基础讲座III</td>        <td align="center" rowspan="3">　</td>        <td align="center" rowspan="3">　</td>    </tr><tr style="height:50px;">        <td>第10节</td>    </tr><tr style="height:50px;">        <td>第11节</td><td align="center">　</td><td align="center">　</td>    </tr></table><p>共计16门课</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>吐槽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown示例</title>
    <link href="/2021/08/06/markdown%E7%A4%BA%E4%BE%8B/"/>
    <url>/2021/08/06/markdown%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="table-container"><table><thead><tr><th></th><th>周一</th><th>周二</th><th>周三</th></tr></thead><tbody><tr><td>上午</td><td>睡觉</td><td>睡觉</td><td>睡觉</td></tr><tr><td>下午</td><td>睡觉</td><td>睡觉</td><td>睡觉</td></tr><tr><td>晚上</td><td>打豆豆</td><td>打豆豆</td><td>打豆豆</td></tr></tbody></table></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">import</span> json<span class="token keyword">from</span> weixindata<span class="token punctuation">.</span>items <span class="token keyword">import</span> WeixindataItem<span class="token keyword">class</span> <span class="token class-name">TeamdataSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'teamdata'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'https://algo.weixin.qq.com/wealgo-bin/leaderboard/get_all_leaderboard?page_index=1&amp;page_size=10'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        re <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        item <span class="token operator">=</span> WeixindataItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        page <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        list_1 <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'那么多C带带我怎么了'</span><span class="token punctuation">,</span>            <span class="token string">'吃得粮中粮，方为狗中皇'</span><span class="token punctuation">,</span>            <span class="token string">'在马里亚纳海沟里学深度学习'</span><span class="token punctuation">,</span>            <span class="token string">'平安喜乐'</span><span class="token punctuation">,</span>            <span class="token string">'R&amp;Q'</span><span class="token punctuation">,</span>            <span class="token string">'苏大启航队'</span><span class="token punctuation">,</span>            <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>            <span class="token string">'乐乐乐'</span><span class="token punctuation">,</span>            <span class="token string">'long_bo_heng'</span><span class="token punctuation">,</span>            <span class="token string">'Krista八千鸟'</span><span class="token punctuation">,</span>            <span class="token string">'今晚海底捞'</span><span class="token punctuation">,</span>            <span class="token string">'诺飞扬'</span><span class="token punctuation">,</span>            <span class="token string">'twohzre小队'</span><span class="token punctuation">,</span>            <span class="token string">'jokers'</span><span class="token punctuation">,</span>            <span class="token string">'摸鱼划水'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> re<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'detail'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">[</span><span class="token string">'team_name'</span><span class="token punctuation">]</span> <span class="token keyword">in</span> list_1<span class="token punctuation">:</span>                item<span class="token punctuation">[</span><span class="token string">'team_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'team_name'</span><span class="token punctuation">]</span>                item<span class="token punctuation">[</span><span class="token string">'team_seq'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'seq'</span><span class="token punctuation">]</span>                item<span class="token punctuation">[</span><span class="token string">'team_score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span>                <span class="token keyword">yield</span> item        <span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>        <span class="token keyword">if</span> page <span class="token operator">&lt;</span> <span class="token number">146</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>                url<span class="token operator">=</span><span class="token string">'https://algo.weixin.qq.com/wealgo-bin/leaderboard/get_all_leaderboard?page_index='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                    page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;page_size=10'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><script type="math/tex; mode=display">\begin{aligned}b_n&=\frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\sin nx\,dx \\\frac{\pi^2}{6}&=\sum_{n=1}^\infty{\frac{1}{n^2}}\end{aligned}</script><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://cdn.jsdelivr.net/gh/suxss/image/wallroom-2880x1800-bg-f296f86.jpg" alt="图片1"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>吃饭</li><li>睡觉</li><li>打豆豆</li></ol><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><div class="note note-info">            <p>关于我打豆豆这档事</p>          </div><div class="note note-danger">            <p>打豆豆很危险</p>          </div><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><audio controls align="center"><source src="https://pan.bilnn.com/api/v3/file/sourcejump/WX9A5WH9/t29cKfz8xl_KLHmOCE6e5TLOwQek5a04dM7dHcwMBA4*" type="audio/mpeg"><source src="https://pan.bilnn.com/api/v3/file/sourcejump/2ld6EwcG/iPElTB6zI8fVeuOAedWEH_P7LA3m9HBrYP2YzUOfVtY*" type="audio/mpeg"></audio><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><video src='https://pan.bilnn.com/api/v3/file/sourcejump/J8adEKFz/dwgudyXgp7pF98qbgvq7iJrItTIaEP_njH4k8xwSFCs* ' type='video/mp4' controls='controls'  poster = 'https://pan.bilnn.com/api/v3/file/sourcejump/E5lzE5C9/2sbiTA_xX0-uQo3zx3Bu3McSnXSGwWa3jTcmoTDguBU*' width='100%' height='100%'></video>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电子书下载程序</title>
    <link href="/2021/08/06/%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD/"/>
    <url>/2021/08/06/%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>这几天做了个小软件，用来下载电子书</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/suxss/image/ui.png" alt="主界面"></p><p><a href="https://wwr.lanzoui.com/iNrRqsa0t8f">下载链接</a></p><p>密码： <code>1111</code></p><p><a href="https://github.com/suxss/books_downloader">开源地址</a></p><p>觉得好用就点个 <code>star</code>吧😊</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
