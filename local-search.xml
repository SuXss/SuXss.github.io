<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>容斥原理的简单运用</title>
    <link href="/2021/08/11/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/"/>
    <url>/2021/08/11/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%E7%9A%84%E7%AE%80%E5%8D%95%E8%BF%90%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>昨天看了一道题，题目大概是甲乙丙分别多少秒放一次鞭炮， 然后问一个时间段里能听到多少响。<br>其实就是给出三个正整数$n_1, n_2, n_3$，再给一个$n$，问$1\sim n$​秒内有多少个不重复的数被它们其中一个整除。</p><p>用集合的语言描述如下</p><script type="math/tex; mode=display">n_1,n_2,n_3,n已知,A=\{k|k \in \\N^*,k\leq n, k|n_1或k|n_2或k|n_3\},求|A|.</script><p>为了计算集合$A$​所含元素个数，可以先计算下面三个集合所含元素个数，再减去重复计数的个数</p><script type="math/tex; mode=display">A_1=\{k|k \in \\N^*,k\leq n, k|n_1\}\\A_2=\{k|k \in \\N^*,k\leq n, k|n_2\}\\A_3=\{k|k \in \\N^*,k\leq n, k|n_3\}</script><p><img src="https://cdn.jsdelivr.net/gh/suxss/image/2021/绘图1.jpg" alt="图1"></p><p>其中$A_1\cap A_2,A_1\cap A_3,A_2\cap A_3$​里的元素被多算了，因此要减去</p><p>如果直接减去$|A_1\cap A_2|+|A_1\cap A_3|+|A_2\cap A_3|$​的话，$A_1\cap A_2\cap A_3$里的元素又多减了，因此得加上，</p><p>于是，得到公式</p><script type="math/tex; mode=display">A_1 \cup A_2\cup A_3=|A_1|+|A_2|+|A_3|-|A_1\cap A_2|-|A_1\cap A_3|-|A_2\cap A_3|+|A_1\cap A_2\cap A_3|</script><p>整理一下就是</p><script type="math/tex; mode=display">\bigcup_{i=1}^3 A_i=\sum_{i=1}^3(-1)^{i-1}\sum_{1\leq j_1\cdots \leq j_i\leq3}|\bigcap_{k=1}^iA_{j_k}|</script><p>接下来就是去求每一项，其中关键的是求最小公倍数</p><p>三个数的最小公倍数可以用两组两个数的最小公倍数表示</p><script type="math/tex; mode=display">[n_1,n_2,n_3]=[[n_1,n_2],[n_2,n_3]]</script><p>证明很简单，如下</p><script type="math/tex; mode=display">\forall k,\space k|n_1,k|n_2,k|n_3; \\\left\{ {\begin{array}{*{20}{c}}{k|{n_1}}\\{k|{n_2}}\end{array} \Leftrightarrow k|[{n_1},{n_2}]}; \right.\\k|[{n_1},{n_2}],k|[{n_1},{n_3}],k|[{n_2},{n_3}];\\k|[[n_1,n_2],[n_2,n_3]]</script><p>由此我们得到 这三个数的任意的公倍数都被$[[n_1,n_2],[n_2,n_3]]$整除</p><p>而$[[n_1,n_2],[n_2,n_3]]$显然是$n_1, n_2, n_3$​的公倍数，证毕</p><p>而最小公倍数与最大公因数有如下关系</p><script type="math/tex; mode=display">[a,b]\cdot(a,b)=ab</script><p>因此要求最小公倍数只需求最大公因数，这就可以用辗转相除法</p><p>Python代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">successive_division</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span>, b: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span>  <span class="hljs-comment"># 辗转相除法</span><br>    <span class="hljs-keyword">while</span> a % b != <span class="hljs-number">0</span>:<br>        a, b = b, a % b<br>    <span class="hljs-keyword">return</span> b<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">least_common_multiple</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span>, b: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span>  <span class="hljs-comment"># 最小公倍数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(a * b / successive_division(a, b))<br></code></pre></div></td></tr></table></figure><p>C语言代码如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">successive_division</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = a, j = b, t;<br>    <span class="hljs-keyword">while</span> (i % j != <span class="hljs-number">0</span>) &#123;<br>        t = i;<br>        i = j;<br>        j = t % j;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">least_common_multiple</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a * b / successive_division(a, b);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>依靠这个就能写出求解原问题的函数</p><p>Python代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solution</span>(<span class="hljs-params">n1: <span class="hljs-built_in">int</span>, n2: <span class="hljs-built_in">int</span>, n3: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>    result = n // n1 + n // n2 + n // n3<br>    result -= n // least_common_multiple(n1, n2) + n // least_common_multiple(n1, n3) + n // least_common_multiple(n2, n3)<br>    result += n // least_common_multiple(least_common_multiple(n1, n2), least_common_multiple(n1, n3))<br>    <span class="hljs-keyword">return</span> result<br></code></pre></div></td></tr></table></figure><p>C语言代码如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solution</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n1, <span class="hljs-keyword">int</span> n2, <span class="hljs-keyword">int</span> n3, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>    result += n / n1 + n / n2 + n / n3;<br>    result -= n / least_common_multiple(n1, n2) + n / least_common_multiple(n1, n3) + n / least_common_multiple(n2, n3);<br>    result += n / least_common_multiple(least_common_multiple(n1, n2), least_common_multiple(n1, n3));<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序（二）</title>
    <link href="/2021/08/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2/"/>
    <url>/2021/08/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2/</url>
    
    <content type="html"><![CDATA[<p>昨天看着原理大致地写了写快速排序的Python实现。主要是把原列表分成了三块：小于参考数的、等于参考数的、大于参考数的。</p><p>遍历列表，看看每个数属于哪一类，接着将它们分别放入三个列表中，对其中不等于参考数的两个列表运用函数递归排序后在拼接起来。</p><p>用Python可以很方便的实现，因为Python的变量所占用的内存空间不是恒定不变的，在列表上的体现就是创建一个新列表时不需要声明其长度。而大部分语言在声明变量时就要为其分配一个固定大小的内存空间，体现在列表（或者数组）上就是其长度在一开始就是固定的。当然可以在一开始就设置成长度足够大的列表（或数组），然而这样必然会很大比例的内存空间浪费。因此，如果要直接将昨天的代码改写成其他语言，基本上是运行效率不高的。于是，今天来试着改一改昨天的代码。</p><h2 id="Python代码的改写"><a href="#Python代码的改写" class="headerlink" title="Python代码的改写"></a>Python代码的改写</h2><p>昨天的快速排序代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort_1</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num_list) &gt; <span class="hljs-number">1</span>:<br>        x = <span class="hljs-built_in">len</span>(num_list)//<span class="hljs-number">2</span><br>        list_1 = []<br>        list_3 = []<br>        list_2 = []<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> num_list:<br>            <span class="hljs-keyword">if</span> item &lt; num_list[x]:<br>                list_1.append(item)<br>            <span class="hljs-keyword">elif</span> item &gt; num_list[x]:<br>                list_2.append(item)<br>            <span class="hljs-keyword">else</span>:<br>                list_3.append(item)<br>        sorted_list = quick_sort_1(list_1)<br>        sorted_list.extend(list_3)<br>        sorted_list.extend(quick_sort_1(list_2))<br>        <span class="hljs-keyword">return</span> sorted_list<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> num_list<br></code></pre></div></td></tr></table></figure><p>关键在于如何修改，划分原列表，使其分为多个部分。</p><p>这里给出三种基于在原列表上交换两数的方法</p><ul><li>第一种</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort_2</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-built_in">len</span>(num_list) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> j &gt; i:<br>        x = num_list[i]<br>        <span class="hljs-keyword">while</span> i &lt; j:<br>            <span class="hljs-keyword">while</span> num_list[j] &gt;= x <span class="hljs-keyword">and</span> i &lt; j:<br>                j -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i &lt; j:<br>                num_list[i], num_list[j] = num_list[j], num_list[i]<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> num_list[i] &lt;= x <span class="hljs-keyword">and</span> i &lt; j:<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i &lt; j:<br>                num_list[i], num_list[j] = num_list[j], num_list[i]<br>                j -= <span class="hljs-number">1</span><br>        sorted_list = quick_sort_2(num_list[:i])<br>        sorted_list.append(num_list[i])<br>        sorted_list.extend(quick_sort_2(num_list[i+<span class="hljs-number">1</span>:]))<br>        <span class="hljs-keyword">return</span> sorted_list<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> num_list<br></code></pre></div></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort_3</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span>, left, right</span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    i = left<br>    j = right<br>    <span class="hljs-keyword">if</span> j &gt; i:<br>        x = num_list[i]<br>        <span class="hljs-keyword">while</span> i &lt; j:<br>            <span class="hljs-keyword">while</span> num_list[j] &gt;= x <span class="hljs-keyword">and</span> i &lt; j:<br>                j -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i &lt; j:<br>                num_list[i], num_list[j] = num_list[j], num_list[i]<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> num_list[i] &lt;= x <span class="hljs-keyword">and</span> i &lt; j:<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i &lt; j:<br>                num_list[i], num_list[j] = num_list[j], num_list[i]<br>                j -= <span class="hljs-number">1</span><br>        sorted_list = quick_sort_3(num_list, left, i-<span class="hljs-number">1</span>)<br>        sorted_list.append(num_list[i])<br>        sorted_list.extend(quick_sort_3(num_list, i+<span class="hljs-number">1</span>, right))<br>        <span class="hljs-keyword">return</span> sorted_list<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> num_list[left: right+<span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><ul><li>第三种</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort_4</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-built_in">len</span>(num_list) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> j &gt; i:<br>        x = num_list[i]<br>        <span class="hljs-keyword">while</span> i &lt; j:<br>            <span class="hljs-keyword">while</span> num_list[j] &gt;= x <span class="hljs-keyword">and</span> i &lt; j:<br>                j -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i &lt; j:<br>                num_list[i], num_list[j] = num_list[j], num_list[i]<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> num_list[i] &lt;= x <span class="hljs-keyword">and</span> i &lt; j:<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i &lt; j:<br>                num_list[i], num_list[j] = num_list[j], num_list[i]<br>                j -= <span class="hljs-number">1</span><br>        sorted_list = quick_sort_4(num_list[:j])<br>        sorted_list.extend(num_list[j:i+<span class="hljs-number">1</span>])<br>        sorted_list.extend(quick_sort_4(num_list[i+<span class="hljs-number">1</span>:]))<br>        <span class="hljs-keyword">return</span> sorted_list<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> num_list<br></code></pre></div></td></tr></table></figure><p>运行速度和昨天的都差不多</p><h2 id="改写为C语言"><a href="#改写为C语言" class="headerlink" title="改写为C语言"></a>改写为C语言</h2><p>将上面第二种方法改写为C语言，代码如下<br><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i=left, j=right, x, t;<br>    <span class="hljs-keyword">if</span>(j &gt; i)&#123;<br>        x = *(a+i);<br>        <span class="hljs-keyword">while</span> (i &lt; j)&#123;<br>            <span class="hljs-keyword">while</span> (*(a+(j)) &gt;= x &amp;&amp; i &lt; j)<br>                j--;<br>            <span class="hljs-keyword">if</span>(i &lt; j)&#123;<br>                t = *(a+i);<br>                *(a+(i++)) = *(a+j);<br>                *(a+j) = t;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (*(a+i) &lt;= x &amp;&amp; i &lt; j)<br>                i++;<br>            <span class="hljs-keyword">if</span>(i &lt; j)&#123;<br>                t = *(a+i);<br>                *(a+i) = *(a+j);<br>                *(a+(j--)) = t;<br>            &#125;<br>        &#125;<br>        quick_sort(a, left, i<span class="hljs-number">-1</span>);<br>        quick_sort(a, i+<span class="hljs-number">1</span>, right);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></p><p>由于C语言速度太快了，所以这次测试10万个数的排序</p><p>完整测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100000</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pprint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>, *(a + i));<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = left, j = right, x, t;<br>    <span class="hljs-keyword">if</span> (j &gt; i) &#123;<br>        x = *(a + i);<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-keyword">while</span> (*(a + (j)) &gt;= x &amp;&amp; i &lt; j)<br>                j--;<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>                t = *(a + i);<br>                *(a + (i++)) = *(a + j);<br>                *(a + j) = t;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (*(a + i) &lt;= x &amp;&amp; i &lt; j)<br>                i++;<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>                t = *(a + i);<br>                *(a + i) = *(a + j);<br>                *(a + (j--)) = t;<br>            &#125;<br>        &#125;<br>        quick_sort(a, left, i - <span class="hljs-number">1</span>);<br>        quick_sort(a, i + <span class="hljs-number">1</span>, right);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    srand((<span class="hljs-keyword">unsigned</span>) time(<span class="hljs-literal">NULL</span>));<br>    <span class="hljs-keyword">int</span> a[N] = &#123;<span class="hljs-number">0</span>,&#125;;<br>    <span class="hljs-keyword">double</span> duration;<br>    <span class="hljs-keyword">time_t</span> start_time, end_time;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>        *(a + i) = rand() % N;<br><span class="hljs-comment">//    pprint(a, N);</span><br>    start_time = clock();<br>    quick_sort(a, <span class="hljs-number">0</span>, N);<br>    end_time = clock();<br>    duration = (<span class="hljs-keyword">double</span>) (end_time - start_time) / CLK_TCK;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lfs\n&quot;</span>, duration);<br><span class="hljs-comment">//    pprint(a, N);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果如下</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">0.011000s<br><br>进程已结束，退出代码为 0<br></code></pre></div></td></tr></table></figure><p>昨天Python的快速排序<strong>1万</strong>个数需要大概<strong>0.015</strong>秒与C语言快速排序<strong>10万</strong>个所花时间差不多</p><h2 id="Python代码的优化"><a href="#Python代码的优化" class="headerlink" title="Python代码的优化"></a>Python代码的优化</h2><p>Python版本的快速排序排序10万个数的运行时间如下</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">quick_sort</span>:<span class="hljs-number">0</span>.<span class="hljs-number">16658687591552734</span>s<br></code></pre></div></td></tr></table></figure><p>Python的功能是十分强大的，但是居然落后这么多，让我十分不甘心。</p><p>下面我们来优化Python版本的代码</p><h3 id="1-把所有变量都转为局部变量"><a href="#1-把所有变量都转为局部变量" class="headerlink" title="1.把所有变量都转为局部变量"></a>1.把所有变量都转为局部变量</h3><p>直接把之前<code>if __name__ == &#39;__main__&#39;:</code>里的语句写入<code>main</code>函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br>    <span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br>    n = <span class="hljs-number">100000</span><br>    a = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a.append(randint(<span class="hljs-number">1</span>, n))<br><br>    t1 = time()<br>    c = quick_sort(a)<br>    t2 = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;quick_sort:<span class="hljs-subst">&#123;t2 - t1&#125;</span>s&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>优化结果</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">quick_sort</span>:<span class="hljs-number">0</span>.<span class="hljs-number">15358948707580566</span>s<br></code></pre></div></td></tr></table></figure><p>效果不是很明显</p><h3 id="2-使用pypy3"><a href="#2-使用pypy3" class="headerlink" title="2.使用pypy3"></a>2.使用pypy3</h3><p>运行结果</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">quick_sort_3</span>:<span class="hljs-number">0</span>.<span class="hljs-number">023967981338500977</span>s<br></code></pre></div></td></tr></table></figure><p>大约快了8倍，多次运行发现快的可以到<code>0.02s</code></p><h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h3><p>还可以使用numpy库的array代替list</p><p>但是我这里的代码用了较多的extend和append方法，如果用array无法实现数组原地修改，因此如果直接用的话速度反而会降下来</p><p>其实Python里列表排序可以直接使用sort方法</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br>n = <span class="hljs-number">100000</span><br>a = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>a.append(randint(<span class="hljs-number">1</span>, n))<br>t1 = time()<br>a.sort()<br>t2 = time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;quick_sort:<span class="hljs-subst">&#123;t2 - t1&#125;</span>s&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>使用pypy3运行，运行时间为<code>0.010~0.011s</code>左右，与C语言持平</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序（一）</title>
    <link href="/2021/08/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/08/09/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>最近借了些书，有本叫做<u>算法与程序设计(Python)</u>，然而里面300页只有80页在讲算法，大部分在讲Python基础，有种被骗了的感觉:disappointed:</p><p>算法部分也很多都是很基础的内容。</p><p>里面有一个讲的是快速排序，快排的大名可以说是早有耳闻了:smile:，但是一直没学，上学期自己去看了下大致的原理，但是没空把实现的代码写出来，也懒得去找代码。看到这本书里有快排，我满怀希望地翻到这一部分，才发现并没有给出实现的代码，也是讲了一下原理，给了大致的伪代码。现在正好无聊，就试着根据原理写写这个实现代码。</p><hr><p>因为对Python比较熟，而且Python语法更简单，就先写快排的Python实现</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num_list) &gt; <span class="hljs-number">1</span>:  <span class="hljs-comment"># 如果长度等于1就不用排序，直接返回</span><br>        x = <span class="hljs-built_in">len</span>(num_list)//<span class="hljs-number">2</span>  <span class="hljs-comment"># 随便找一个参考数</span><br>        list_1 = []  <span class="hljs-comment"># list_1里放比参考数小的</span><br>        list_2 = []  <span class="hljs-comment"># list_2里放比参考数大的</span><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> num_list:<br>            <span class="hljs-keyword">if</span> item &lt; num_list[x]:<br>                list_1.append(item)<br>            <span class="hljs-keyword">else</span>:<br>                list_2.append(item)<br>        <span class="hljs-comment"># 函数递归，分别对list_1,list_2进行快速排序，再合并起来</span><br>        sorted_list = quick_sort(list_1)<br>        sorted_list.append(num_list[x])<br>        sorted_list.extend(quick_sort(list_2))<br>        <span class="hljs-keyword">return</span> sorted_list<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> num_list<br></code></pre></div></td></tr></table></figure><p>一开始很顺利的写了出来，然而运行出了问题</p><p>测试代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>]<br>    b = quick_sort(a)<br>    <span class="hljs-built_in">print</span>(b)<br></code></pre></div></td></tr></table></figure><p>运行后，程序报错如下</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-built_in">Traceback</span> (most recent call last):<br>  <span class="hljs-built_in">File</span> <span class="hljs-string">&quot;****\main.py&quot;</span>, line <span class="hljs-number">20</span>, in &lt;<span class="hljs-keyword">module</span>&gt;<br>    b = <span class="hljs-built_in">quick_sort</span>(a)<br>  <span class="hljs-built_in">File</span> <span class="hljs-string">&quot;****\main.py&quot;</span>, line <span class="hljs-number">11</span>, in quick_sort<br>    sorted_list = <span class="hljs-built_in">quick_sort</span>(list_1)<br>  <span class="hljs-built_in">File</span> <span class="hljs-string">&quot;****\main.py&quot;</span>, line <span class="hljs-number">11</span>, in quick_sort<br>    sorted_list = <span class="hljs-built_in">quick_sort</span>(list_1)<br>  <span class="hljs-built_in">File</span> <span class="hljs-string">&quot;****\main.py&quot;</span>, line <span class="hljs-number">12</span>, in quick_sort<br>    sorted_list.<span class="hljs-built_in">extend</span>(<span class="hljs-built_in">quick_sort</span>(list_2))<br>  <span class="hljs-built_in">File</span> <span class="hljs-string">&quot;****\main.py&quot;</span>, line <span class="hljs-number">12</span>, in quick_sort<br>    sorted_list.<span class="hljs-built_in">extend</span>(<span class="hljs-built_in">quick_sort</span>(list_2))<br>  <span class="hljs-built_in">File</span> <span class="hljs-string">&quot;****\main.py&quot;</span>, line <span class="hljs-number">12</span>, in quick_sort<br>    sorted_list.<span class="hljs-built_in">extend</span>(<span class="hljs-built_in">quick_sort</span>(list_2))<br>  [Previous line repeated <span class="hljs-number">992</span> more times]<br>  <span class="hljs-built_in">File</span> <span class="hljs-string">&quot;****\main.py&quot;</span>, line <span class="hljs-number">11</span>, in quick_sort<br>    sorted_list = <span class="hljs-built_in">quick_sort</span>(list_1)<br>  <span class="hljs-built_in">File</span> <span class="hljs-string">&quot;****\main.py&quot;</span>, line <span class="hljs-number">2</span>, in quick_sort<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num_list) &gt; <span class="hljs-number">1</span>:<br>RecursionError: maximum recursion depth exceeded <span class="hljs-keyword">while</span> calling a Python object<br><br>进程已结束，退出代码为 <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>其中问题的翻译如下</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">RecursionError：调用 Python 对象时超出了最大递归深度<br></code></pre></div></td></tr></table></figure><p>上网查了一下</p><p>Python递归深度最多1000</p><p>但是我这里测试用的列表<code>a</code>的长度为7，按理说正常运行不会超过1000的递归深度，于是我加了打印代码，看看排序的过程如何</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;list_1:<span class="hljs-subst">&#123;list_1&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x:<span class="hljs-subst">&#123;x&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;list_2:<span class="hljs-subst">&#123;list_2&#125;</span>&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>输出显示当有两个数相同时(如下)会一直重复的递归</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">list_1:[]<br>x:<span class="hljs-number">1</span><br>list_2:[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><p>于是想到排序的过程中加入第三个列表，放置与参考数相同的数</p><p>改进的代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num_list) &gt; <span class="hljs-number">1</span>:<br>        x = <span class="hljs-built_in">len</span>(num_list)//<span class="hljs-number">2</span><br>        list_1 = []<br>        list_3 = []<br>        list_2 = []<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> num_list:<br>            <span class="hljs-keyword">if</span> item &lt; num_list[x]:<br>                list_1.append(item)<br>            <span class="hljs-keyword">elif</span> item &gt; num_list[x]:<br>                list_2.append(item)<br>            <span class="hljs-keyword">else</span>:<br>                list_3.append(item)<br>        sorted_list = quick_sort(list_1)<br>        sorted_list.extend(list_3)<br>        sorted_list.extend(quick_sort(list_2))<br>        <span class="hljs-keyword">return</span> sorted_list<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> num_list<br></code></pre></div></td></tr></table></figure><p>成功运行，结果如下</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></div></td></tr></table></figure><hr><p>这还不够，如果测试数据大一些呢？能否正常运行？</p><p>为此，引入<code>random</code>库，继续对函数进行测试，测试代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> random<br>    n = <span class="hljs-number">10000</span><br>    a = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a.append(random.randint(<span class="hljs-number">1</span>, n))<br>    b = quick_sort(a)<br>    <span class="hljs-built_in">print</span>(b)<br></code></pre></div></td></tr></table></figure><p>1万个数排序起来好像确实挺快的，瞬间出结果，总所周知Python的运行速度是比较慢的，所以还是挺意外的</p><hr><p>下面进一步测试快排的性能</p><p>将其与选择排序和冒泡排序进行比较</p><p>选择排序代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_sort</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num_list)):<br>        j = num_list[i:].index(<span class="hljs-built_in">min</span>(num_list[i:])) + i<br>        num_list[i], num_list[j] = num_list[j], num_list[i]<br>    <span class="hljs-keyword">return</span> num_list<br></code></pre></div></td></tr></table></figure><p>冒泡排序代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num_list)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(num_list)):<br>            <span class="hljs-keyword">if</span> num_list[i] &gt; num_list[j]:<br>                num_list[i], num_list[j] = num_list[j], num_list[i]<br>    <span class="hljs-keyword">return</span> num_list<br></code></pre></div></td></tr></table></figure><p>测试代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> random<br>    <span class="hljs-keyword">import</span> time<br>    <br>    n = <span class="hljs-number">10000</span><br>    a = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a.append(random.randint(<span class="hljs-number">1</span>, n))<br><br>    t1 = time.time()<br>    b = quick_sort(a)<br>    t2 = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;quick_sort:<span class="hljs-subst">&#123;t2-t1&#125;</span>s&quot;</span>)<br><br>    t1 = time.time()<br>    c = select_sort(a)<br>    t2 = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;select_sort:<span class="hljs-subst">&#123;t2 - t1&#125;</span>s&quot;</span>)<br><br>    t1 = time.time()<br>    d = bubble_sort(a)<br>    t2 = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;bubble_sort:<span class="hljs-subst">&#123;t2 - t1&#125;</span>s&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>运行结果如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">quick_sort:<span class="hljs-number">0.013994216918945312</span>s  <span class="hljs-comment"># 快速排序</span><br>select_sort:<span class="hljs-number">0.8812062740325928</span>s  <span class="hljs-comment"># 选择排序</span><br>bubble_sort:<span class="hljs-number">2.001237630844116</span>s  <span class="hljs-comment"># 冒泡排序</span><br></code></pre></div></td></tr></table></figure><p>从结果来看快速排序通常情况下确实要比另外两种排序方法快的</p><hr><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num_list) &gt; <span class="hljs-number">1</span>:<br>        x = <span class="hljs-built_in">len</span>(num_list)//<span class="hljs-number">2</span><br>        list_1 = []<br>        list_3 = []<br>        list_2 = []<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> num_list:<br>            <span class="hljs-keyword">if</span> item &lt; num_list[x]:<br>                list_1.append(item)<br>            <span class="hljs-keyword">elif</span> item &gt; num_list[x]:<br>                list_2.append(item)<br>            <span class="hljs-keyword">else</span>:<br>                list_3.append(item)<br>        sorted_list = quick_sort(list_1)<br>        sorted_list.extend(list_3)<br>        sorted_list.extend(quick_sort(list_2))<br>        <span class="hljs-keyword">return</span> sorted_list<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> num_list<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_sort</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num_list)):<br>        j = num_list[i:].index(<span class="hljs-built_in">min</span>(num_list[i:]))+i<br>        num_list[i], num_list[j] = num_list[j], num_list[i]<br>    <span class="hljs-keyword">return</span> num_list<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params">num_list: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num_list)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(num_list)):<br>            <span class="hljs-keyword">if</span> num_list[i] &gt; num_list[j]:<br>                num_list[i], num_list[j] = num_list[j], num_list[i]<br>    <span class="hljs-keyword">return</span> num_list<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> random<br>    <span class="hljs-keyword">import</span> time<br>    n = <span class="hljs-number">10000</span><br>    a = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a.append(random.randint(<span class="hljs-number">1</span>, n))<br><br>    t1 = time.time()<br>    b = quick_sort(a)<br>    t2 = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;quick_sort:<span class="hljs-subst">&#123;t2-t1&#125;</span>s&quot;</span>)<br><br>    t1 = time.time()<br>    c = select_sort(a)<br>    t2 = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;select_sort:<span class="hljs-subst">&#123;t2 - t1&#125;</span>s&quot;</span>)<br><br>    t1 = time.time()<br>    d = bubble_sort(a)<br>    t2 = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;bubble_sort:<span class="hljs-subst">&#123;t2 - t1&#125;</span>s&quot;</span>)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下学期课表</title>
    <link href="/2021/08/07/%E4%B8%8B%E5%AD%A6%E6%9C%9F%E8%AF%BE%E8%A1%A8/"/>
    <url>/2021/08/07/%E4%B8%8B%E5%AD%A6%E6%9C%9F%E8%AF%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<table>    <tr>        <td colspan="2" rowspan="1" style="width:2%;">时间</td><td align="center" style="width:14%;">星期一</td><td align="center" style="width:14%;">星期二</td><td align="center" style="width:14%;">星期三</td><td align="center" style="width:14%;">星期四</td><td align="center" style="width:14%;">星期五</td>        </tr><tr style="height:50px;">        <td rowspan="4" style="width:1%;">上午</td><td style="width:1%;">第一节</td><td align="center" rowspan="2" style="width:7%;">大学英语（三）</td><td align="center" rowspan="2" style="width:7%;">常微分方程</td><td align="center" rowspan="2" style="width:7%;">抽象代数1</td><td align="center" rowspan="2" style="width:7%;">计算机网络</td><td align="center" rowspan="2" style="width:7%;">概率论与数理统计（一）</td>    </tr><tr style="height:50px;">        <td>第二节</td>    </tr><tr style="height:50px;">        <td>第三节</td><td align="center" rowspan="2">数学分析（Ⅲ）</td><td align="center" rowspan="2">概率论与数理统计（一）</td><td align="center" rowspan="2">数学分析（Ⅲ）</td><td align="center" rowspan="2">计算机网络</td><td align="center" rowspan="2">常微分方程</td>    </tr><tr style="height:50px;">        <td>第四节</td>    </tr><tr style="height:50px;">        <td rowspan="4" style="width:1%;">下午</td><td>第五节</td><td align="center" rowspan="2">军事理论</td><td align="center" rowspan="2">普通物理实验</td><td align="center">&nbsp;</td><td align="center" rowspan="2">马克思主义基本原理概论</td><td align="center" rowspan="2">数学分析（Ⅲ）</td>    </tr><tr style="height:50px;">        <td>第六节</td><td align="center">&nbsp;</td>    </tr><tr style="height:50px;">        <td>第七节</td><td align="center" rowspan="2">篮球（男生）2</td><td align="center" rowspan="2">普通物理实验</td><td align="center">&nbsp;</td><td align="center">马克思主义基本原理概论</td><td align="center" rowspan="2">数学分析（Ⅲ）</td>    </tr><tr style="height:50px;">        <td>第八节</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td>    </tr><tr style="height:50px;">        <td rowspan="3" style="width:1%;">晚上</td><td>第九节</td><td align="center" rowspan="3">统计学基础</td><td align="center" rowspan="2">拓扑学1</td><td align="center" rowspan="3">组合数学</td><td align="center" rowspan="2">数学基础讲座III</td><td align="center">&nbsp;</td>    </tr><tr style="height:50px;">        <td>第10节</td><td align="center">&nbsp;</td>    </tr><tr style="height:50px;">        <td>第11节</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td>    </tr></table><p>周末课表还没出来，但是明确的是有</p><ul><li>离散数学</li><li>数据结构</li><li>数据库原理与设计</li></ul><p>而且</p><div class="note note-danger">            <p>周六 <strong><em>8</em></strong> 节课 周日 <strong><em>4</em></strong> 节课</p>          </div><p>高中至少还有晚自习的时间写写作业</p><p>这是真的连写作业的时间都不一定有</p><p>更何况不算计科院的离散数学</p><p>总共要上 <strong><em>8</em></strong> 门数学课</p><p>其中不乏 <u>抽象代数</u>、 <u>拓扑学</u> 、<u>组合数学</u>等有名的高难度课程</p><p>之前连数学分析都可以做到 <strong><em>一盏灯，一壶酒，一道数分做一宿</em></strong>， 这些课程更不用想象</p><p>那放假总轻松了吧？</p><p>呵呵 :blush:</p><p>中秋放 <strong><em>一</em></strong> 天</p><p>国庆放 <strong><em>三</em></strong> 天</p><p>别的就不用说了吧 :blush:</p><p><del>苦逼</del> 充实 的大学生活</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>吐槽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown示例</title>
    <link href="/2021/08/06/markdown%E7%A4%BA%E4%BE%8B/"/>
    <url>/2021/08/06/markdown%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="table-container"><table><thead><tr><th></th><th>周一</th><th>周二</th><th>周三</th></tr></thead><tbody><tr><td>上午</td><td>睡觉</td><td>睡觉</td><td>睡觉</td></tr><tr><td>下午</td><td>睡觉</td><td>睡觉</td><td>睡觉</td></tr><tr><td>晚上</td><td>打豆豆</td><td>打豆豆</td><td>打豆豆</td></tr></tbody></table></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> weixindata.items <span class="hljs-keyword">import</span> WeixindataItem<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeamdataSpider</span>(<span class="hljs-params">scrapy.Spider</span>):</span><br>    name = <span class="hljs-string">&#x27;teamdata&#x27;</span><br>    start_urls = [<br>        <span class="hljs-string">&#x27;https://algo.weixin.qq.com/wealgo-bin/leaderboard/get_all_leaderboard?page_index=1&amp;page_size=10&#x27;</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self, response</span>):</span><br>        re = json.loads(response.text)<br>        item = WeixindataItem()<br>        page = <span class="hljs-built_in">int</span>(response.url.split(<span class="hljs-string">&#x27;&amp;&#x27;</span>)[-<span class="hljs-number">2</span>].split(<span class="hljs-string">&#x27;=&#x27;</span>)[-<span class="hljs-number">1</span>])<br>        list_1 = [<br>            <span class="hljs-string">&#x27;那么多C带带我怎么了&#x27;</span>,<br>            <span class="hljs-string">&#x27;吃得粮中粮，方为狗中皇&#x27;</span>,<br>            <span class="hljs-string">&#x27;在马里亚纳海沟里学深度学习&#x27;</span>,<br>            <span class="hljs-string">&#x27;平安喜乐&#x27;</span>,<br>            <span class="hljs-string">&#x27;R&amp;Q&#x27;</span>,<br>            <span class="hljs-string">&#x27;苏大启航队&#x27;</span>,<br>            <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,<br>            <span class="hljs-string">&#x27;乐乐乐&#x27;</span>,<br>            <span class="hljs-string">&#x27;long_bo_heng&#x27;</span>,<br>            <span class="hljs-string">&#x27;Krista八千鸟&#x27;</span>,<br>            <span class="hljs-string">&#x27;今晚海底捞&#x27;</span>,<br>            <span class="hljs-string">&#x27;诺飞扬&#x27;</span>,<br>            <span class="hljs-string">&#x27;twohzre小队&#x27;</span>,<br>            <span class="hljs-string">&#x27;jokers&#x27;</span>,<br>            <span class="hljs-string">&#x27;摸鱼划水&#x27;</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;detail&#x27;</span>]:<br>            <span class="hljs-keyword">if</span> i[<span class="hljs-string">&#x27;team_name&#x27;</span>] <span class="hljs-keyword">in</span> list_1:<br>                item[<span class="hljs-string">&#x27;team_name&#x27;</span>] = i[<span class="hljs-string">&#x27;team_name&#x27;</span>]<br>                item[<span class="hljs-string">&#x27;team_seq&#x27;</span>] = i[<span class="hljs-string">&#x27;seq&#x27;</span>]<br>                item[<span class="hljs-string">&#x27;team_score&#x27;</span>] = i[<span class="hljs-string">&#x27;score&#x27;</span>]<br>                <span class="hljs-keyword">yield</span> item<br>        <span class="hljs-built_in">print</span>(page)<br>        <span class="hljs-keyword">if</span> page &lt; <span class="hljs-number">146</span>:<br>            <span class="hljs-keyword">yield</span> scrapy.Request(<br>                url=<span class="hljs-string">&#x27;https://algo.weixin.qq.com/wealgo-bin/leaderboard/get_all_leaderboard?page_index=&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                    page + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;&amp;page_size=10&#x27;</span>)<br><br></code></pre></div></td></tr></table></figure><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><script type="math/tex; mode=display">b_n=\frac{1}{\pi}\int_{-\pi}^{\pi}f(x)\sin nx\,dx\\\frac{\pi^2}{6}=\sum_{n=1}^\infty{\frac{1}{n^2}}</script><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://cdn.jsdelivr.net/gh/suxss/image/wallroom-2880x1800-bg-f296f86.jpg" alt="图片1"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>吃饭</li><li>睡觉</li><li>打豆豆</li></ol><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><div class="note note-info">            <p>关于我打豆豆这档事</p>          </div><div class="note note-danger">            <p>打豆豆很危险</p>          </div><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><div style=" display:flex;justify-content: center;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26908739&auto=0&height=66"></iframe></div><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"https://vdn3.vzuu.com/HD/8b4305d0-fcd1-11ea-9ec1-06f2f03a7434.mp4?disable_local_cache=1&auth_key=1628788877-0-0-c86db38783ce28685d8f17dfb3848d6d&f=mp4&bu=http-com&expiration=1628788877&v=tx\"pic=https://pic2.zhimg.com/v2-dd137fc4fac6baed7e2b79097457a564_r.jpg?source=12a79843loop=yes\""}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暴打王秋阳的第一天</title>
    <link href="/2021/08/06/%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD/"/>
    <url>/2021/08/06/%E7%94%B5%E5%AD%90%E4%B9%A6%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>很是快落<br><span id="more"></span></p><p>这几天做了个小软件，用来下载电子书</p><p><img src="https://cdn.jsdelivr.net/gh/suxss/image/ui.png" alt="主界面"></p><p><a href="https://wwr.lanzoui.com/iNrRqsa0t8f">下载链接</a></p><p>密码： <code>1111</code></p><p><a href="https://github.com/suxss/books_downloader">开源地址</a></p><p>觉得好用就点个 <code>star</code>吧:blush:</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>喜剧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
